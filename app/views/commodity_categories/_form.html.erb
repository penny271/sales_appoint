<%# - 青木 要更新- 20231021 SPA %>
<%# ¥ 操作後変更したいもの - 置き換えられるもの %>
<%# * 全体を`turbo_frame_tag`で囲う %>
<%# * 編集リンクをクリックすると、_cat.html.erbの<turbo-frame>部分がこの部分に置換される %>
<%# ! 注目ポイントはturbo_frame_tagの引数にcommodity_categoryを利用してる。これでshow.html.erbの<turbo-frame id="commodity_category_1">とedit.html.erb（内でrenderしている_form.html.erb）の<turbo-frame id="commodity_category_1">がマッチするようになる。つまり編集リンクをクリックすると、_commodity_category.html.erbの<turbo-frame id="commodity_category_1">部分が、_form.html.erbの<turbo-frame id="commodity_category_1">部分に置換されるようになるよ。 %>
<%= turbo_frame_tag commodity_category do %>
  <%# - 20231022 urlを省くと、railsが自動で create と update を場合分けして urlのルートを決定してくれる %>
  <%= form_with model: @commodity_category do |f| %>
    <%# form_with model: @commodity_category, url: commodity_categories_path do |f|  |||| %>
    <div class="flex">
      <!-- No. Column -->
      <div class="flex-none flex gap-3 px-6 py-4 w-1/6 border-r border-b border-gray-300 items-center">
        <%# <div class="text-sm font-medium text-gray-700">新規登録</div> %>
        <div class="m-auto">
          <%# <%= f.submit "Submit", class: "apl-btn-blue" %>
          <%# ¥ ja.ymlで 手動で文字列を設定する方法%>
          <%# <%= f.submit t("commodity_categories.form.add_item"), class: "apl-btn-blue" %>
          <%# ¥ ja.ymlで form_with を使っていた場合に共通のテキストを使用する場合 %>
          <%= f.submit class: @commodity_category.new_record? ? "apl-btn-blue" : "apl-btn-orange" %>
          <%= link_to "戻る", commodity_category, class: 'apl-btn-gray' %>
        </div>
      </div>
      <!-- Name Column -->
      <div class="flex-grow px-6 py-4 border-r border-b border-gray-300">
        <%# sr-only は tailwindが用意しているscreen reader用で画面には表示されない %>
        <%= f.label :name, class: "sr-only" %>
        <%= f.text_field :name, class: "w-full", placeholder: "商材名を入力してください" %>
      </div>
      <!-- Icons Column - Considering these might be action buttons, I'm keeping them, adjust as needed -->
      <div class="flex-none flex justify-end gap-4 px-6 py-4 w-1/6 border-r border-b border-gray-300">
        <!-- You might want to adjust these action buttons based on the form's purpose -->
        <div class="m-auto">
          <%# <%= f.submit "Submit", class: "apl-btn-blue" %>
          <%# ¥ ja.ymlで 手動で文字列を設定する方法%>
          <%# <%= f.submit t("commodity_categories.form.add_item"), class: "apl-btn-blue" %>
          <%# ¥ ja.ymlで form_with を使っていた場合に共通のテキストを使用する場合 %>
          <%= f.submit class: @commodity_category.new_record? ? "apl-btn-blue" : "apl-btn-orange" %>
          <%= link_to "戻る", commodity_category, class: 'apl-btn-gray' %>
        </div>
      </div>
    </div>
    <!-- Add a Submit button -->
  <% end %>
<% end %>
<%# //////////////////////////////// %>
<%
=begin
%>
<%= turbo_frame_tag "new_commodity_category" do %>
  <div class="overflow-hidden rounded-lg border border-gray-200 shadow-md m-5">
    <table class="w-full border-collapse bg-white text-left text-sm text-gray-500">
      <thead class="bg-gray-50">
        <tr>
          <th scope="col" class="px-6 py-4 font-medium text-gray-900">商材名</th>
          <%# delete + edit アイコン用 %>
          <th scope="col" class="px-6 py-4 font-medium text-gray-900"></th>
        </tr>
      </thead>
      <tbody class="divide-y divide-gray-100 border-t border-gray-100">
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4">
            <%= form_with model: @commodity_category, url: commodity_categories_path do |f| %>
              <%= f.text_field :name %>
              <%= f.submit '登録', class: 'apl-btn-blue' %>
              <%= link_to "キャンセル", commodity_categories_path, class: 'apl-btn-gray' %>
            <% end %>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
<% end %>
<%
=end
%>
